<service
    android:name=".java.MyFirebaseMessagingService"
    android:exported="false">
    <intent-filter>
        <action android:name="com.google.firebase.MESSAGING_EVENT" />
    </intent-filter>
</service>

// Declare the launcher at the top of your Activity/Fragment:
private final ActivityResultLauncher<String> requestPermissionLauncher =
        registerForActivityResult(new ActivityResultContracts.RequestPermission(), isGranted -> {
            if (isGranted) {
                // FCM SDK (and your app) can post notifications.
            } else {
                // TODO: Inform user that that your app will not show notifications.
            }
        });

private void askNotificationPermission() {
    // This is only necessary for API level >= 33 (TIRAMISU)
    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.TIRAMISU) {
        if (ContextCompat.checkSelfPermission(this, Manifest.permission.POST_NOTIFICATIONS) ==
                PackageManager.PERMISSION_GRANTED) {
            // FCM SDK (and your app) can post notifications.
        } else if (shouldShowRequestPermissionRationale(Manifest.permission.POST_NOTIFICATIONS)) {
            // TODO: display an educational UI explaining to the user the features that will be enabled
            //       by them granting the POST_NOTIFICATION permission. This UI should provide the user
            //       "OK" and "No thanks" buttons. If the user selects "OK," directly request the permission.
            //       If the user selects "No thanks," allow the user to continue without notifications.
        } else {
            // Directly ask for the permission
            requestPermissionLauncher.launch(Manifest.permission.POST_NOTIFICATIONS);
        }
    }
}

FirebaseMessaging.getInstance().getToken()
    .addOnCompleteListener(new OnCompleteListener<String>() {
        @Override
        public void onComplete(@NonNull Task<String> task) {
          if (!task.isSuccessful()) {
            Log.w(TAG, "Fetching FCM registration token failed", task.getException());
            return;
          }

          // Get new FCM registration token
          String token = task.getResult();

          // Log and toast
          String msg = getString(R.string.msg_token_fmt, token);
          Log.d(TAG, msg);
          Toast.makeText(MainActivity.this, msg, Toast.LENGTH_SHORT).show();
        }
    });

//myfirebase messaging service
/**
 * There are two scenarios when onNewToken is called:
 * 1) When a new token is generated on initial app startup
 * 2) Whenever an existing token is changed
 * Under #2, there are three scenarios when the existing token is changed:
 * A) App is restored to a new device
 * B) User uninstalls/reinstalls the app
 * C) User clears app data
 */
@Override
public void onNewToken(@NonNull String token) {
    Log.d(TAG, "Refreshed token: " + token);

    // If you want to send messages to this application instance or
    // manage this apps subscriptions on the server side, send the
    // FCM registration token to your app server.
    sendRegistrationToServer(token);
}

//android manifest.xml
<meta-data
    android:name="firebase_messaging_auto_init_enabled"
    android:value="false" />
<meta-data
    android:name="firebase_analytics_collection_enabled"
    android:value="false" />

FirebaseMessaging.getInstance().setAutoInitEnabled(true); // main activity

//https://github.com/firebase/quickstart-android/tree/master/messaging - 파이어베이스 제공 코드

const functions = require('firebase-functions');
const admin = require('firebase-admin');
const schedule = require('node-schedule');

admin.initializeApp();

exports.scheduleNotifications = functions.firestore.document('alarms/{alarmId}')
  .onCreate(async (snapshot, context) => {
    // 알람 데이터 가져오기
    const alarmData = snapshot.data();

    // 푸시 알림을 예약할 날짜 및 시간 설정
    const { days, time } = alarmData;
    const [hour, minute] = time.split(':');
    const scheduledDate = new Date();
    scheduledDate.setUTCHours(Number(hour));
    scheduledDate.setUTCMinutes(Number(minute));
    const dayOfWeek = days.map(day => ['일', '월', '화', '수', '목', '금', '토'].indexOf(day));
    
    // 예약 조건 설정 (요일, 시간)
    const rule = new schedule.RecurrenceRule();
    rule.dayOfWeek = dayOfWeek;
    rule.hour = scheduledDate.getUTCHours();
    rule.minute = scheduledDate.getUTCMinutes();

    // 예약된 작업 생성
    const job = schedule.scheduleJob(rule, async () => {
      // 알림 메시지 구성
      const message = {
        notification: {
          title: 'Truffle',
          body: '지금까지의 소비를 확인해보세요',
        },
        
        token: '사용자의 푸시 토큰', // 사용자 푸시 토큰
      };

      try {
        // FCM을 통해 알림 메시지 전송
        const response = await admin.messaging().send(message);
        console.log('알림이 성공적으로 전송되었습니다:', response);
      } catch (error) {
        console.error('알림 전송 중 오류 발생:', error);
      }
    });

    console.log('알람이 예약되었습니다.');

    return null;
  });
